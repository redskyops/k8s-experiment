name: Master
on:
  push:
    branches:
      - master
    tags:
      - v*
jobs:
  build:
    name: Build and Deploy
    runs-on: macos-latest
    env:
      BUILD_METADATA: build.${{ github.run_number }}
      GIT_COMMIT: ${{ github.sha }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: Install minikube
        id: install-minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/v1.19.0/minikube-darwin-amd64
          sudo install minikube-darwin-amd64 /usr/local/bin/minikube
          rm minikube-darwin-amd64
          brew install hyperkit docker
          echo "::set-output name=cache-key::$(minikube version | md5)"
      - name: Cache minikube
        uses: actions/cache@v2
        with:
          path: |
            ~/.minikube/cache
            ~/.minikube/bin
          key: ${{ runner.os }}-minikube-${{ steps.install-minikube.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-minikube-
      - name: Start minikube
        run: |
          minikube delete
          minikube start --vm-driver hyperkit --wait all
          minikube docker-env | sed '/^#/d;s/="\(.*\)"/=\1/g;s/export //g' >> $GITHUB_ENV
      - name: Go Cache
        uses: actions/cache@v1
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        env:
          GPG_PRIVATE_KEY: ${{ secrets.BMASTERS_PRIVATE_KEY }}
      - name: Bootstrap
        run: |
          if [ -z "${GITHUB_REF/refs\/tags\/*/}" ]; then
            DOCKER_REGISTRY="thestormforge"
            DOCKER_TAG=${GITHUB_REF##*/v}
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            echo "VERSION=v${DOCKER_TAG}" >> $GITHUB_ENV
            echo "AC_USERNAME=${{ secrets.AC_USERNAME }}" >> $GITHUB_ENV
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            DOCKER_REGISTRY="ghcr.io/thestormforge"
            DOCKER_TAG="sha-$(git rev-parse --short HEAD)"
            echo "IMAGE_TAG=edge" >> $GITHUB_ENV
          fi
          echo "IMG=${DOCKER_REGISTRY}/optimize-controller:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "REDSKYCTL_IMG=${DOCKER_REGISTRY}/redskyctl:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "SETUPTOOLS_IMG=${DOCKER_REGISTRY}/setuptools:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "PULL_POLICY=" >> $GITHUB_ENV
      - name: Build controller
        run: |
          make docker-build-ci
      - name: Build tool
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist --release-notes hack/changelog.md.txt
        env:
          GITHUB_TOKEN: ${{ secrets.BMASTERS_TOKEN }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_IDENTITY_P12: ${{ secrets.AC_IDENTITY_P12 }}
      - name: Push Docker images
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "ghcr.io" -u "${{ github.actor }}" --password-stdin
          make docker-push
          docker-push() {
            docker tag "$1" "$2"
            docker push "$2"
          }
          docker-push "${IMG}" "${IMG%%:*}:${IMAGE_TAG}"
          docker-push "${REDSKYCTL_IMG}" "${REDSKYCTL_IMG%%:*}:${IMAGE_TAG}"
          docker-push "${SETUPTOOLS_IMG}" "${SETUPTOOLS_IMG%%:*}:${IMAGE_TAG}"
          if [ "${IMG#ghcr.io/}" = "${IMG}" ]; then
            docker-push "${IMG}" "ghcr.io/${IMG}"
            docker-push "${REDSKYCTL_IMG}" "ghcr.io/${REDSKYCTL_IMG}"
            docker-push "${SETUPTOOLS_IMG}" "ghcr.io/${SETUPTOOLS_IMG}"
          fi
      - name: Upload macOS binary
        uses: actions/upload-artifact@v1
        with:
          name: redskyctl_darwin_amd64
          path: dist/redskyctl-darwin-amd64.tar.gz
      - name: Upload Linux binary
        uses: actions/upload-artifact@v1
        with:
          name: redskyctl_linux_amd64
          path: dist/redskyctl-linux-amd64.tar.gz
